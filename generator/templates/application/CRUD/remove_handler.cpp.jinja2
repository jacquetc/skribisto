#include "remove_{{ entity_mappable_with_snake }}_command_handler.h"
#include "automapper/automapper.h"
#include "persistence/interface_{{ entity_mappable_with_snake }}_repository.h"

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;
using namespace Contracts::CQRS::{{ feature_pascal_name }}::Commands;
using namespace Application::Features::{{ feature_pascal_name }}::Commands;

Remove{{ entity_mappable_with_pascal }}CommandHandler::Remove{{ entity_mappable_with_pascal }}CommandHandler(QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository>repository)
    : m_repository(repository)
{
    if (!s_mappingRegistered)
    {
        registerMappings();
        s_mappingRegistered = true;
    }
}

Result<int>Remove{{ entity_mappable_with_pascal }}CommandHandler::handle(QPromise<Result<void> >   & progressPromise,
                                                      const Remove{{ entity_mappable_with_pascal }}Command& request)
{
    Result<int> result;

    try
    {
        result = handleImpl(progressPromise, request);
    }
    catch (const std::exception& ex)
    {
        result = Result<int>(Error(Q_FUNC_INFO, Error::Critical, "Unknown error", ex.what()));
        qDebug() << "Error handling Remove{{ entity_mappable_with_pascal }}Command:" << ex.what();
    }
    return result;
}

Result<int>Remove{{ entity_mappable_with_pascal }}CommandHandler::restore()
{
    Result<int> result;

    try
    {
        result = restoreImpl();
    }
    catch (const std::exception& ex)
    {
        result = Result<int>(Error(Q_FUNC_INFO, Error::Critical, "Unknown error", ex.what()));
        qDebug() << "Error handling Remove{{ entity_mappable_with_pascal }}Command restore:" << ex.what();
    }
    return result;
}

Result<int>Remove{{ entity_mappable_with_pascal }}CommandHandler::handleImpl(QPromise<Result<void> >   & progressPromise,const Remove{{ entity_mappable_with_pascal }}Command& request)
{   
    Result<Domain::{{ entity_mappable_with_pascal }}> {{ entity_mappable_with_camel }}Result = m_repository->get(request.id);

    if (Q_UNLIKELY({{ entity_mappable_with_camel }}Result.hasError()))
    {
        qDebug() << "Error getting {{ entity_mappable_with_camel }} from repository:" << {{ entity_mappable_with_camel }}Result.error().message();
        return Result<int>({{ entity_mappable_with_camel }}Result.error());
    }

    // save old entity
    m_oldState = {{ entity_mappable_with_camel }}Result.value();

    int {{ entity_mappable_with_camel }}Id;

    auto deleteResult = m_repository->remove({{ entity_mappable_with_camel }}Id);

    if (Q_UNLIKELY(deleteResult.hasError()))
    {
        qDebug() << "Error deleting {{ entity_mappable_with_camel }} from repository:" << deleteResult.error().message();
        return Result<int>(deleteResult.error());
    }

    emit {{ entity_mappable_with_camel }}Removed(deleteResult.value());

    qDebug() << "{{ entity_mappable_with_pascal }} removed:" << {{ entity_mappable_with_camel }}Id;

    return Result<int>({{ entity_mappable_with_camel }}Id);
}

Result<int>Remove{{ entity_mappable_with_pascal }}CommandHandler::restoreImpl()
{
    
    // Add the {{ entity_mappable_with_camel }} to the repository
    auto {{ entity_mappable_with_camel }}Result = m_repository->add(std::move(m_oldState));

    if (Q_UNLIKELY({{ entity_mappable_with_camel }}Result.hasError()))
    {
        return Result<int>({{ entity_mappable_with_camel }}Result.error());
    }

    auto {{ entity_mappable_with_camel }}DTO = AutoMapper::AutoMapper::map<Domain::{{ entity_mappable_with_pascal }}, {{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_camel }}Result.value());

    emit {{ entity_mappable_with_camel }}Created({{ entity_mappable_with_camel }}DTO);
    qDebug() << "{{ entity_mappable_with_pascal }} added:" << {{ entity_mappable_with_camel }}DTO.id();

    // Return the UUID of the newly created {{ entity_mappable_with_camel }} as a Result object
    return Result<int>(0);
}


bool Remove{{ entity_mappable_with_pascal }}CommandHandler::s_mappingRegistered = false;

void Remove{{ entity_mappable_with_pascal }}CommandHandler::registerMappings() 
{
    AutoMapper::AutoMapper::registerMapping<Domain::{{ entity_mappable_with_pascal }}, Contracts::DTO::{{ feature_pascal_name }}::{{ entity_mappable_with_pascal }}DTO>(true);
}
