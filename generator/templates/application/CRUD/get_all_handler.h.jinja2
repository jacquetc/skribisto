#pragma once

#include "{{ export_header }}"
#include "{{ feature_snake_name }}/{{ entity_mappable_with_snake }}_dto.h"

#include "persistence/interface_{{ entity_mappable_with_snake }}_repository.h"
#include <QPromise>

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;

namespace Application::Features::{{ feature_pascal_name }}::Queries
{
class {{Â export }} GetAll{{ entity_mappable_with_pascal }}QueryHandler : public QObject
{
    Q_OBJECT
  public:
    GetAll{{ entity_mappable_with_pascal }}QueryHandler(QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository> repository);
    Result<QList<{{ entity_mappable_with_pascal }}DTO>> handle(QPromise<Result<void>> &progressPromise);

  private:
    QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository> m_repository;
    Result<QList<{{ entity_mappable_with_pascal }}DTO>> handleImpl(QPromise<Result<void> >   & progressPromise);
    static bool s_mappingRegistered;
    void registerMappings();
};

} // namespace Application::Features::{{ feature_pascal_name }}::Queries
