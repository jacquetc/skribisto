#pragma once

#include "{{ export_header }}"
#include "{{ feature_snake_name }}/{{ entity_mappable_with_snake }}_dto.h"
#include "{{ feature_snake_name }}/commands/update_{{ entity_mappable_with_snake }}_command.h"

#include "persistence/interface_{{ entity_mappable_with_snake }}_repository.h"
#include "result.h"
#include <QPromise>

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;
using namespace Contracts::CQRS::{{ feature_pascal_name }}::Commands;

namespace Application::Features::{{ feature_pascal_name }}::Commands
{
class {{Â export }} Update{{ entity_mappable_with_pascal }}CommandHandler : public QObject 

{
    Q_OBJECT
  public:
    Update{{ entity_mappable_with_pascal }}CommandHandler(QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository> repository);
    Result<{{ entity_mappable_with_pascal }}DTO> handle(QPromise<Result<void>> &progressPromise, const Update{{ entity_mappable_with_pascal }}Command &request);
    Result<{{ entity_mappable_with_pascal }}DTO> restore();

  signals:
    void {{ entity_mappable_with_camel }}Updated(Contracts::DTO::{{ entity_mappable_with_pascal }}::{{ entity_mappable_with_pascal }}DTO {{ entity_mappable_with_camel }}Dto);

  private:
    QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository> m_repository;
    Result<{{ entity_mappable_with_pascal }}DTO> handleImpl(QPromise<Result<void> >   & progressPromise, const Update{{ entity_mappable_with_pascal }}Command &request);
    Result<{{ entity_mappable_with_pascal }}DTO> restoreImpl();
    Result<{{ entity_mappable_with_pascal }}DTO> saveOldState();
    Result<{{ entity_mappable_with_pascal }}DTO> m_newState;
    static bool s_mappingRegistered;
    void registerMappings();
};

} // namespace Application::Features::{{ feature_pascal_name }}::Commands
