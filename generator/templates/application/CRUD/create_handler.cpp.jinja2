#include "create_{{ entity_mappable_with_snake }}_command_handler.h"
#include "automapper/automapper.h"
#include "{{ feature_snake_name }}/validators/create_{{ entity_mappable_with_snake }}_command_validator.h"
#include "persistence/interface_{{ entity_mappable_with_snake }}_repository.h"

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;
using namespace Contracts::CQRS::{{ feature_pascal_name }}::Validators;
using namespace Application::Features::{{ feature_pascal_name }}::Commands;

Create{{ entity_mappable_with_pascal }}CommandHandler::Create{{ entity_mappable_with_pascal }}CommandHandler(QSharedPointer<Interface{{ entity_mappable_with_pascal }}Repository>repository)
    : m_repository(repository)
{
    if (!s_mappingRegistered)
    {
        registerMappings();
        s_mappingRegistered = true;
    }

}

Result<{{ entity_mappable_with_pascal }}DTO>Create{{ entity_mappable_with_pascal }}CommandHandler::handle(QPromise<Result<void> >   & progressPromise,
                                                      const Create{{ entity_mappable_with_pascal }}Command& request)
{
    Result<{{ entity_mappable_with_pascal }}DTO> result;

    try
    {
        result = handleImpl(progressPromise, request);
    }
    catch (const std::exception& ex)
    {
        result = Result<{{ entity_mappable_with_pascal }}DTO>(Error(Q_FUNC_INFO, Error::Critical, "Unknown error", ex.what()));
        qDebug() << "Error handling Create{{ feature_pascal_name }}Command:" << ex.what();
    }
    return result;
}

Result<{{ entity_mappable_with_pascal }}DTO>Create{{ entity_mappable_with_pascal }}CommandHandler::restore()
{
    Result<{{ entity_mappable_with_pascal }}DTO> result;

    try
    {
        result = restoreImpl();
    }
    catch (const std::exception& ex)
    {
        result = Result<{{ entity_mappable_with_pascal }}DTO>(Error(Q_FUNC_INFO, Error::Critical, "Unknown error", ex.what()));
        qDebug() << "Error handling Create{{ entity_mappable_with_pascal }}Command restore:" << ex.what();
    }
    return result;
}

Result<{{ entity_mappable_with_pascal }}DTO>Create{{ entity_mappable_with_pascal }}CommandHandler::handleImpl(QPromise<Result<void> >   & progressPromise,const Create{{ entity_mappable_with_pascal }}Command& request)
{
    qDebug() << "Create{{ entity_mappable_with_pascal }}CommandHandler::handleImpl called";
    Domain::{{ entity_mappable_with_pascal }} {{ entity_mappable_with_camel }};

    if (m_newState.isEmpty())
    {
        // Validate the create {{ entity_mappable_with_pascal }} command using the validator
        auto validator               = Create{{ entity_mappable_with_pascal }}CommandValidator(m_repository);
        Result<void> validatorResult = validator.validate(request.req);

        if (Q_UNLIKELY(validatorResult.hasError()))
        {
            return Result<{{ entity_mappable_with_pascal }}DTO>(validatorResult.error());
        }

        // Map the create {{ entity_mappable_with_pascal }} command to a domain {{ entity_mappable_with_pascal }} object and
        // generate a UUID
        {{ entity_mappable_with_camel }} = AutoMapper::AutoMapper::map<Create{{ entity_mappable_with_pascal }}DTO, Domain::{{ entity_mappable_with_pascal }}>(request.req);

        // allow for forcing the uuid
        if ({{ entity_mappable_with_camel }}.uuid().isNull())
        {
            {{ entity_mappable_with_camel }}.setUuid(QUuid::createUuid());
        }

        // Set the creation and update timestamps to the current date and time
        {{ entity_mappable_with_camel }}.setCreationDate(QDateTime::currentDateTime());
        {{ entity_mappable_with_camel }}.setUpdateDate(QDateTime::currentDateTime());
    }
    else
    {
        // Map the create {{ entity_mappable_with_camel }} command to a domain {{ entity_mappable_with_camel }} object and
        // generate a UUID
        {{ entity_mappable_with_camel }} = AutoMapper::AutoMapper::map<{{ entity_mappable_with_pascal }}DTO, Domain::{{ entity_mappable_with_pascal }}>(m_newState.value());
    }

    // Add the {{ entity_mappable_with_camel }} to the repository

    m_repository->beginChanges();
    auto {{ entity_mappable_with_camel }}Result = m_repository->add(std::move({{ entity_mappable_with_camel }}));

    if (Q_UNLIKELY({{ entity_mappable_with_camel }}Result.hasError()))
    {
        m_repository->cancelChanges();
        return Result<{{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_camel }}Result.error());
    }
    m_repository->saveChanges();

    auto {{ entity_mappable_with_camel }}DTO = AutoMapper::AutoMapper::map<Domain::{{ entity_mappable_with_pascal }}, {{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_camel }}Result.value());

    m_newState = Result<{{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_camel }}DTO);

    emit {{ entity_mappable_with_camel }}Created({{ entity_mappable_with_camel }}DTO);

    qDebug() << "{{ entity_mappable_with_pascal }} added:" << {{ entity_mappable_with_camel }}DTO.id();

    // Return the DTO of the newly created {{ entity_mappable_with_pascal }} as a Result object
    return Result<{{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_camel }}DTO);
}

Result<{{ entity_mappable_with_pascal }}DTO>Create{{ entity_mappable_with_pascal }}CommandHandler::restoreImpl()
{

    auto deleteResult = m_repository->remove(m_newState.value().id());

    if (Q_UNLIKELY(deleteResult.hasError()))
    {
        qDebug() << "Error deleting {{ entity_mappable_with_pascal }} from repository:" << deleteResult.error().message();
        return Result<{{ entity_mappable_with_pascal }}DTO>(deleteResult.error());
    }

    emit {{ entity_mappable_with_camel }}Removed(deleteResult.value());

    qDebug() << "{{ entity_mappable_with_pascal }} removed:" << deleteResult.value();

    return Result<{{ entity_mappable_with_pascal }}DTO>({{ entity_mappable_with_pascal }}DTO());
}

bool Create{{ entity_mappable_with_pascal }}CommandHandler::s_mappingRegistered = false;

void Create{{ entity_mappable_with_pascal }}CommandHandler::registerMappings() 
{
    AutoMapper::AutoMapper::registerMapping<Domain::{{ entity_mappable_with_pascal }}, Contracts::DTO::{{ feature_pascal_name }}::{{ entity_mappable_with_pascal }}DTO>(true);
    AutoMapper::AutoMapper::registerMapping<Contracts::DTO::{{ feature_pascal_name }}::Create{{ entity_mappable_with_pascal }}DTO, Domain::{{ entity_mappable_with_pascal }}>();
}
