#pragma once

#include "{{ export_header }}"
#include "{{ feature_snake_name }}_dto.h"
#include "cqrs/{{ feature_snake_name }}/commands/remove_{{ feature_snake_name }}_command.h"
#include "handler.h"
#include "persistence/interface_{{ feature_snake_name }}_repository.h"
#include "result.h"

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;
using namespace Contracts::CQRS::{{ feature_pascal_name }}::Commands;

namespace Application::Features::{{ feature_pascal_name }}::Commands
{
class {{Â export }} Remove{{ feature_pascal_name }}CommandHandler : public Handler
{
    Q_OBJECT
  public:
    Remove{{ feature_pascal_name }}CommandHandler(QSharedPointer<Interface{{ feature_pascal_name }}Repository> repository);
    Result<{{ feature_pascal_name }}DTO> handle(QPromise<Result<void>> &progressPromise, const Remove{{ feature_pascal_name }}Command &request);
    Result<{{ feature_pascal_name }}DTO> restore();

  signals:
    void {{ feature_snake_name }}Created(Contracts::DTO::{{ feature_pascal_name }}::{{ feature_pascal_name }}DTO {{ feature_snake_name }}Dto);
    void {{ feature_snake_name }}Removed(Contracts::DTO::{{ feature_pascal_name }}::{{ feature_pascal_name }}DTO {{ feature_snake_name }}Dto);

  private:
    QSharedPointer<Interface{{ feature_pascal_name }}Repository> m_repository;
    Result<{{ feature_pascal_name }}DTO> handleImpl(const Remove{{ feature_pascal_name }}Command &request);
    Result<{{ feature_pascal_name }}DTO> restoreImpl();
    Result<{{ feature_pascal_name }}DTO> saveOldState();
    Result<{{ feature_pascal_name }}DTO> m_newState;
};


struct CallOnce
{
    CallOnce()
    {
        registerMappings();
    }
    void registerMappings();

};
// This line will ensure the function is called once at the start of the program.
static CallOnce callOnceInstance;

} // namespace Application::Features::{{ feature_pascal_name }}::Commands
