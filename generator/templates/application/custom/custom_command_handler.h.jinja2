#pragma once

#include "{{ export_header }}"
#include "{{ feature_snake_name }}/{{ command.dto_out_snake_name }}.h"
#include "{{ feature_snake_name }}/commands/{{ command.snake_name }}_command.h"
{% for repository in command.repositories %}
#include "persistence/interface_{{ repository.snake_name}}_repository.h"{% endfor %}
#include "result.h"
#include <QPromise>

using namespace Contracts::DTO::{{ feature_pascal_name }};
using namespace Contracts::Persistence;
using namespace Contracts::CQRS::{{ feature_pascal_name }}::Commands;

namespace Application::Features::{{ feature_pascal_name }}::Commands
{
class {{Â export }} {{ command.pascal_name }}CommandHandler : public QObject 
{
    Q_OBJECT
  public:
    {{ command.pascal_name }}CommandHandler({% for repository in command.repositories %}
QSharedPointer<Interface{{ repository.pascal_name }}Repository>{{ repository.camel_name }}Repository {% if not loop.last %},{% endif %}{% endfor %});

    Result<{{ command.dto_out_pascal_name }}> handle(QPromise<Result<void>> &progressPromise, const {{ command.pascal_name }}Command &request);

    Result<{{ command.dto_out_pascal_name }}> restore();

  signals:
    void {{ command.camel_name }}Changed(Contracts::DTO::{{ feature_pascal_name }}::{{ command.dto_out_pascal_name }} {{ command.dto.out.type_prefix_camel }}Dto);

  private:
  {% for repository in command.repositories %}
    QSharedPointer<Interface{{ repository.pascal_name }}Repository> m_{{ repository.camel_name }}Repository;
  {%- endfor %}
    Result<{{ command.dto_out_pascal_name }}> handleImpl(QPromise<Result<void> >   & progressPromise, const {{ command.pascal_name }}Command &request);
{% if command.restore %}
    Result<{{ command.dto_out_pascal_name }}> restoreImpl();
    Result<{{ command.dto_out_pascal_name }}> m_newState;
{% endif %}    
    static bool s_mappingRegistered;
    void registerMappings();
};

} // namespace Application::Features::{{ feature_pascal_name }}::Commands
