# Populate a CMake variable with the sources
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# set(PROJECT_NAME "skribisto-domain")
project(skribisto-domain LANGUAGES CXX VERSION ${VERSION})

find_package(QT NAMES Qt6 COMPONENTS Core CONFIG REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core CONFIG REQUIRED)

set(domain_SRCS

    domain_global.h
)

# Read the file generated by the Python script
file(READ "entities.txt" header_files)

# Convert the new-line separated paths into a CMake list
string(REPLACE "\n" ";" header_files "${header_files}")

add_library(skribisto-domain STATIC ${domain_SRCS} ${header_files}
    entities.h
    entity_schema.h entity_schema.cpp
    domain_registration.h domain_registration.cpp)

target_include_directories(skribisto-domain PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_definitions(skribisto-domain PUBLIC SKRIBISTO_DOMAIN_LIBRARY)

target_link_libraries(skribisto-domain PRIVATE Qt${QT_VERSION_MAJOR}::Core)

# ---------------------------------
if(IOS)
    install(TARGETS skribisto-domain LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif(IOS)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    install(TARGETS skribisto-domain LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    install(TARGETS skribisto-domain
        RUNTIME DESTINATION ${BINDIR}
        LIBRARY DESTINATION ${LIBDIR})
endif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
