# Populate a CMake variable with the sources
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# set(PROJECT_NAME "skribisto-contracts")
project(skribisto-contracts LANGUAGES CXX VERSION ${VERSION})

find_package(QT NAMES Qt6 COMPONENTS Core Sql CONFIG REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Sql CONFIG REQUIRED)

set(contracts_SRCS

    contracts_global.h
    exception.h
    automapper/automapper.h
    error.h
    wait_in_event_loop.h
    result.h
    types.h

    # database:
    database/interface_database_table.h
    database/interface_foreign_entity.h
    database/interface_database_context.h
    database/interface_ordered_database_table.h

    # persistence:
    persistence/interface_generic_repository.h
    persistence/interface_repository.h
    persistence/interface_repository_provider.h

    # author:
    cqrs/author/requests/get_author_request.h
    cqrs/author/commands/create_author_command.h
    cqrs/author/commands/remove_author_command.h
    cqrs/author/commands/update_author_command.h
    cqrs/author/validators/create_author_command_validator.h
    cqrs/author/validators/update_author_command_validator.h

    # system:
    cqrs/system/commands/close_system_command.h
    cqrs/system/commands/save_system_as_command.h
    cqrs/system/commands/load_system_command.h
    cqrs/system/validators/save_system_as_command_validator.h
    cqrs/system/validators/load_system_command_validator.h

    # chapter:
    cqrs/chapter/requests/get_chapter_request.h
    cqrs/chapter/commands/create_chapter_command.h
    cqrs/chapter/commands/remove_chapter_command.h
    cqrs/chapter/commands/update_chapter_command.h
    cqrs/chapter/validators/create_chapter_command_validator.h
    cqrs/chapter/validators/update_chapter_command_validator.h

    # infrastructure:
    infrastructure/skrib/interface_skrib_loader.h
)

# Read the file generated by the Python script
file(READ "repositories.txt" repositories_files)

# Convert the new-line separated paths into a CMake list
string(REPLACE "\n" ";" repositories_files "${repositories_files}")

add_library(skribisto-contracts SHARED ${contracts_SRCS} ${repositories_files})


#qt6_add_qml_module(skribisto-contracts
#  URI Contracts.DTO.Author
#  VERSION 1.0
#  SOURCES
#  # author:
#)


target_include_directories(skribisto-contracts PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")

target_compile_definitions(skribisto-contracts PUBLIC SKRIBISTO_CONTRACTS_LIBRARY)

add_dependencies(skribisto-contracts skribisto-domain)
add_dependencies(skribisto-contracts skribisto-contracts-dto-system)
add_dependencies(skribisto-contracts skribisto-contracts-dto-chapter)
add_dependencies(skribisto-contracts skribisto-contracts-dto-author)

target_link_libraries(skribisto-contracts PUBLIC skribisto-domain)
target_link_libraries(skribisto-contracts PUBLIC skribisto-contracts-dto-system)
target_link_libraries(skribisto-contracts PUBLIC skribisto-contracts-dto-chapter)
target_link_libraries(skribisto-contracts PUBLIC skribisto-contracts-dto-author)
target_link_libraries(skribisto-contracts PRIVATE Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::Sql)

# ---------------------------------
if(IOS)
    install(TARGETS skribisto-contracts LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif(IOS)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    install(TARGETS skribisto-contracts LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    install(TARGETS skribisto-contracts
        RUNTIME DESTINATION ${BINDIR}
        LIBRARY DESTINATION ${LIBDIR})
endif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
